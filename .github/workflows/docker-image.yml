name: Build Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    tags:
      - 'v*'  # Trigger on tag push (e.g., v1.0.0)

env:
  IMAGE_NAME: pet-store/data-transform 

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup permissions
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build -x test -x checkstyleMain -x checkstyleTest

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar 

  lint:
    runs-on: ubuntu-latest
    needs: build  # Ensure this step runs after the build step
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup permissions
        run: chmod +x ./gradlew

      - name: Lint main
        run: ./gradlew checkstyleMain

      - name: Lint test
        run: ./gradlew checkstyleMain

  test:
    runs-on: ubuntu-latest
    needs: build  # Ensure this step runs after the build step
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup permissions
        run: chmod +x ./gradlew

      - name: Run Tests with Gradle
        run: ./gradlew test

  containerize:
    runs-on: ubuntu-latest
    needs: [lint, test]  
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Get version tag      
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          else
            VERSION_TAG=latest
          fi
          echo "IMAGE_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .

      - name: Package Docker image
        run: |
          docker save -o package.tar ${IMAGE_NAME}:${IMAGE_TAG}

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: package.tar  

  publish:
    runs-on: ubuntu-latest
    needs: containerize
    steps:

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Get version tag
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION_TAG=${GITHUB_REF#refs/tags/}
        else
          VERSION_TAG=latest
        fi
        echo "IMAGE_TAG=$VERSION_TAG" >> $GITHUB_ENV

    - name: Load Docker image from tar file
      run: |
        docker load -i package.tar

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image to Docker Hub
      run: |
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:${IMAGE_TAG}
        docker push ${IMAGE_NAME}:${IMAGE_TAG}
        
    - name: Tag image as latest and push
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}:latest
